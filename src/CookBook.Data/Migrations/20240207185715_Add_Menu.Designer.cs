// <auto-generated />
using System;
using CookBook.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CookBook.Data.Migrations
{
    [DbContext(typeof(CookBookDbContext))]
    [Migration("20240207185715_Add_Menu")]
    partial class Add_Menu
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CookBook.Core.Menus.MealProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("MealProducts", (string)null);
                });

            modelBuilder.Entity("CookBook.Core.Menus.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("CookBook.Core.Recipes.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("CookBook.Core.Menus.MealProduct", b =>
                {
                    b.HasOne("CookBook.Core.Menus.Menu", null)
                        .WithMany("MealProducts")
                        .HasForeignKey("MenuId");

                    b.OwnsOne("CookBook.Core.Common.ValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("MealProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Price");

                            b1.HasKey("MealProductId");

                            b1.ToTable("MealProducts");

                            b1.WithOwner()
                                .HasForeignKey("MealProductId");

                            b1.OwnsOne("CookBook.Core.Common.ValueObjects.Discount", "Discount", b2 =>
                                {
                                    b2.Property<Guid>("PriceMealProductId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<decimal>("Value")
                                        .HasColumnType("decimal(18,2)")
                                        .HasColumnName("Discount");

                                    b2.HasKey("PriceMealProductId");

                                    b2.ToTable("MealProducts");

                                    b2.WithOwner()
                                        .HasForeignKey("PriceMealProductId");
                                });

                            b1.OwnsOne("CookBook.Core.Common.ValueObjects.Tax", "Tax", b2 =>
                                {
                                    b2.Property<Guid>("PriceMealProductId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<decimal>("Value")
                                        .HasColumnType("decimal(18,2)")
                                        .HasColumnName("Tax");

                                    b2.HasKey("PriceMealProductId");

                                    b2.ToTable("MealProducts");

                                    b2.WithOwner()
                                        .HasForeignKey("PriceMealProductId");
                                });

                            b1.Navigation("Discount");

                            b1.Navigation("Tax");
                        });

                    b.Navigation("Price");
                });

            modelBuilder.Entity("CookBook.Core.Recipes.Recipe", b =>
                {
                    b.OwnsOne("CookBook.Core.Recipes.Ingredients", "Ingredients", b1 =>
                        {
                            b1.Property<Guid>("RecipeId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("RecipeId");

                            b1.ToTable("Recipes");

                            b1.ToJson("Ingredients");

                            b1.WithOwner()
                                .HasForeignKey("RecipeId");

                            b1.OwnsMany("CookBook.Core.Recipes.ValueObjects.IngredientLine", "Lines", b2 =>
                                {
                                    b2.Property<Guid>("IngredientsRecipeId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<string>("Description")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<int>("Order")
                                        .HasColumnType("int");

                                    b2.Property<string>("Type")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("IngredientsRecipeId", "Id");

                                    b2.ToTable("Recipes");

                                    b2.WithOwner()
                                        .HasForeignKey("IngredientsRecipeId");
                                });

                            b1.Navigation("Lines");
                        });

                    b.OwnsOne("CookBook.Core.Recipes.Ratings", "Ratings", b1 =>
                        {
                            b1.Property<Guid>("RecipeId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("RecipeId");

                            b1.ToTable("Recipes");

                            b1.ToJson("Ratings");

                            b1.WithOwner()
                                .HasForeignKey("RecipeId");

                            b1.OwnsMany("CookBook.Core.Recipes.ValueObjects.Score", "Scores", b2 =>
                                {
                                    b2.Property<Guid>("RatingsRecipeId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<string>("Message")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<int>("Value")
                                        .HasColumnType("int");

                                    b2.HasKey("RatingsRecipeId", "Id");

                                    b2.ToTable("Recipes");

                                    b2.WithOwner()
                                        .HasForeignKey("RatingsRecipeId");
                                });

                            b1.Navigation("Scores");
                        });

                    b.OwnsOne("CookBook.Core.Recipes.ValueObjects.PreparationTime", "PreparationTime", b1 =>
                        {
                            b1.Property<Guid>("RecipeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("Hours")
                                .HasColumnType("int");

                            b1.Property<int>("Minutes")
                                .HasColumnType("int");

                            b1.HasKey("RecipeId");

                            b1.ToTable("Recipes");

                            b1.ToJson("PreparationTime");

                            b1.WithOwner()
                                .HasForeignKey("RecipeId");
                        });

                    b.OwnsOne("CookBook.Core.Recipes.ValueObjects.RecipeDescription", "Description", b1 =>
                        {
                            b1.Property<Guid>("RecipeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasMaxLength(250)
                                .HasColumnType("nvarchar(250)")
                                .HasColumnName("Description");

                            b1.HasKey("RecipeId");

                            b1.ToTable("Recipes");

                            b1.WithOwner()
                                .HasForeignKey("RecipeId");
                        });

                    b.OwnsOne("CookBook.Core.Recipes.ValueObjects.RecipeTitle", "Title", b1 =>
                        {
                            b1.Property<Guid>("RecipeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasMaxLength(80)
                                .HasColumnType("nvarchar(80)")
                                .HasColumnName("Title");

                            b1.HasKey("RecipeId");

                            b1.ToTable("Recipes");

                            b1.WithOwner()
                                .HasForeignKey("RecipeId");
                        });

                    b.Navigation("Description");

                    b.Navigation("Ingredients");

                    b.Navigation("PreparationTime");

                    b.Navigation("Ratings");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("CookBook.Core.Menus.Menu", b =>
                {
                    b.Navigation("MealProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
